using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Result
{

    /*
     * Complete the 'insertionSort2' function below.
     *
     * The function accepts following parameters:
     *  1. INTEGER n
     *  2. INTEGER_ARRAY arr
     */

    public static void insertionSort2(int n, List<int> arr)
    {
        for (int i = 1; i < n; i++)
        {
            var currentElement = arr[i];
            var insertIdx = -1;
            
            for (int k = i - 1; k >= 0; k--)
            {
                var previousElement = arr[k];
                
                if (currentElement < previousElement)
                {
                    insertIdx = k;
                }
            }
            
            if (insertIdx != -1)
            {
                InsertElement(arr, i, insertIdx);
            }
            
            PrintArray(arr);
        }
    }

    public static void InsertElement(List<int> arr, int removeIdx, int insertIdx)
    {
        var toRemove = arr[removeIdx];
        arr.RemoveAt(removeIdx);
        arr.Insert(insertIdx, toRemove);
    }
    
    public static void PrintArray(List<int> arr)
    {
        Console.WriteLine(string.Join(" ", arr));
    }
}

class Solution
{
    public static void Main(string[] args)
    {
        int n = Convert.ToInt32(Console.ReadLine().Trim());

        List<int> arr = Console.ReadLine().TrimEnd().Split(' ').ToList().Select(arrTemp => Convert.ToInt32(arrTemp)).ToList();

        Result.insertionSort2(n, arr);
    }
}
